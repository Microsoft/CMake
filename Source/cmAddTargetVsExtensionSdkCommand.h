/*============================================================================
CMake - Cross Platform Makefile Generator
Copyright 2000-2009 Kitware, Inc., Insight Software Consortium

Distributed under the OSI-approved BSD License (the "License");
see accompanying file Copyright.txt for details.

This software is distributed WITHOUT ANY WARRANTY; without even the
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the License for more information.
============================================================================*/
#ifndef cmAddTargetVsExtensionSdkCommand_h
#define cmAddTargetVsExtensionSdkCommand_h

#include "cmCommand.h"

/** \class cmAddTargetVsExtensionSdkCommand
* \brief Specify an Visual Studio Extension SDK for inclusion in the the target project.
*
* cmAddTargetVsExtensionSdkCommand is used to specify an Visual Studio
* Extension SDK for inclusion in the target project generated by CMake.
*/
class cmAddTargetVsExtensionSdkCommand : public cmCommand
{
public:
    /**
    * This is a virtual constructor for the command.
    */
    virtual cmCommand* Clone()
    {
        return new cmAddTargetVsExtensionSdkCommand;
    }

    /**
    * This is called when the command is first encountered in
    * the CMakeLists.txt file.
    */
    virtual bool InitialPass(std::vector<std::string> const& args,
        cmExecutionStatus &status);

    /**
    * The name of the command as specified in CMakeList.txt.
    */
    virtual std::string GetName() const { return "add_target_vs_extension_sdk"; }

    cmTypeMacro(cmAddTargetVsExtensionSdkCommand, cmCommand);

private:
    bool HandleArguments(std::vector<std::string> const& args);
    void HandleImportedTarget(const std::string &tgt);
    void HandleMissingTarget(const std::string &name);

    void HandleArgs(cmTarget *tgt, const std::string &sdkName, const std::string &sdkVersion);

    std::string Join(const std::string &sdkName, const std::string &sdkVersion);
};

#endif //cmAddTargetVsExtensionSdkCommand_h